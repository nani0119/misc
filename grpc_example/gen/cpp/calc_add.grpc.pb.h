// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calc_add.proto
#ifndef GRPC_calc_5fadd_2eproto__INCLUDED
#define GRPC_calc_5fadd_2eproto__INCLUDED

#include "calc_add.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Calculation {

class CalculateService final {
 public:
  static constexpr char const* service_full_name() {
    return "Calculation.CalculateService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::Calculation::Sum* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Sum>> AsyncaddTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Sum>>(AsyncaddTwoIntsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Sum>> PrepareAsyncaddTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Sum>>(PrepareAsyncaddTwoIntsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::Calculation::Num>> addTotal(::grpc::ClientContext* context, ::Calculation::Sum* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::Calculation::Num>>(addTotalRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Calculation::Num>> AsyncaddTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Calculation::Num>>(AsyncaddTotalRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Calculation::Num>> PrepareAsyncaddTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Calculation::Num>>(PrepareAsyncaddTotalRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Calculation::Num>> getRamdomTotal(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Calculation::Num>>(getRamdomTotalRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Calculation::Num>> AsyncgetRamdomTotal(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Calculation::Num>>(AsyncgetRamdomTotalRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Calculation::Num>> PrepareAsyncgetRamdomTotal(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Calculation::Num>>(PrepareAsyncgetRamdomTotalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>> exchangeRamdomTotal(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>>(exchangeRamdomTotalRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>> AsyncexchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>>(AsyncexchangeRamdomTotalRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>> PrepareAsyncexchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>>(PrepareAsyncexchangeRamdomTotalRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::ClientWriteReactor< ::Calculation::Num>* reactor) = 0;
      #else
      virtual void addTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::experimental::ClientWriteReactor< ::Calculation::Num>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getRamdomTotal(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::Calculation::Num>* reactor) = 0;
      #else
      virtual void getRamdomTotal(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::Calculation::Num>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void exchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Calculation::Num,::Calculation::Num>* reactor) = 0;
      #else
      virtual void exchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Calculation::Num,::Calculation::Num>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Sum>* AsyncaddTwoIntsRaw(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Sum>* PrepareAsyncaddTwoIntsRaw(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::Calculation::Num>* addTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::Calculation::Num>* AsyncaddTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::Calculation::Num>* PrepareAsyncaddTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Calculation::Num>* getRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Calculation::Num>* AsyncgetRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Calculation::Num>* PrepareAsyncgetRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>* exchangeRamdomTotalRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>* AsyncexchangeRamdomTotalRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Calculation::Num, ::Calculation::Num>* PrepareAsyncexchangeRamdomTotalRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::Calculation::Sum* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Calculation::Sum>> AsyncaddTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Calculation::Sum>>(AsyncaddTwoIntsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Calculation::Sum>> PrepareAsyncaddTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Calculation::Sum>>(PrepareAsyncaddTwoIntsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::Calculation::Num>> addTotal(::grpc::ClientContext* context, ::Calculation::Sum* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::Calculation::Num>>(addTotalRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::Calculation::Num>> AsyncaddTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::Calculation::Num>>(AsyncaddTotalRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::Calculation::Num>> PrepareAsyncaddTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::Calculation::Num>>(PrepareAsyncaddTotalRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Calculation::Num>> getRamdomTotal(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Calculation::Num>>(getRamdomTotalRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Calculation::Num>> AsyncgetRamdomTotal(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Calculation::Num>>(AsyncgetRamdomTotalRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Calculation::Num>> PrepareAsyncgetRamdomTotal(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Calculation::Num>>(PrepareAsyncgetRamdomTotalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::Calculation::Num, ::Calculation::Num>> exchangeRamdomTotal(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::Calculation::Num, ::Calculation::Num>>(exchangeRamdomTotalRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>> AsyncexchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>>(AsyncexchangeRamdomTotalRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>> PrepareAsyncexchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>>(PrepareAsyncexchangeRamdomTotalRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::ClientWriteReactor< ::Calculation::Num>* reactor) override;
      #else
      void addTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::experimental::ClientWriteReactor< ::Calculation::Num>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getRamdomTotal(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::Calculation::Num>* reactor) override;
      #else
      void getRamdomTotal(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::Calculation::Num>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void exchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Calculation::Num,::Calculation::Num>* reactor) override;
      #else
      void exchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Calculation::Num,::Calculation::Num>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Calculation::Sum>* AsyncaddTwoIntsRaw(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Calculation::Sum>* PrepareAsyncaddTwoIntsRaw(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::Calculation::Num>* addTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response) override;
    ::grpc::ClientAsyncWriter< ::Calculation::Num>* AsyncaddTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::Calculation::Num>* PrepareAsyncaddTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Calculation::Num>* getRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::Calculation::Num>* AsyncgetRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Calculation::Num>* PrepareAsyncgetRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::Calculation::Num, ::Calculation::Num>* exchangeRamdomTotalRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>* AsyncexchangeRamdomTotalRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>* PrepareAsyncexchangeRamdomTotalRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addTwoInts_;
    const ::grpc::internal::RpcMethod rpcmethod_addTotal_;
    const ::grpc::internal::RpcMethod rpcmethod_getRamdomTotal_;
    const ::grpc::internal::RpcMethod rpcmethod_exchangeRamdomTotal_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status addTwoInts(::grpc::ServerContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response);
    virtual ::grpc::Status addTotal(::grpc::ServerContext* context, ::grpc::ServerReader< ::Calculation::Num>* reader, ::Calculation::Sum* response);
    virtual ::grpc::Status getRamdomTotal(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::Calculation::Num>* writer);
    virtual ::grpc::Status exchangeRamdomTotal(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Calculation::Num, ::Calculation::Num>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_addTwoInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addTwoInts() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addTwoInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoInts(::grpc::ServerContext* /*context*/, const ::Calculation::Addend* /*request*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTwoInts(::grpc::ServerContext* context, ::Calculation::Addend* request, ::grpc::ServerAsyncResponseWriter< ::Calculation::Sum>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addTotal() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_addTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Calculation::Num>* /*reader*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTotal(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::Calculation::Sum, ::Calculation::Num>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRamdomTotal() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRamdomTotal(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::Calculation::Num>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRamdomTotal(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::Calculation::Num>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exchangeRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exchangeRamdomTotal() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_exchangeRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeRamdomTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Calculation::Num, ::Calculation::Num>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexchangeRamdomTotal(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addTwoInts<WithAsyncMethod_addTotal<WithAsyncMethod_getRamdomTotal<WithAsyncMethod_exchangeRamdomTotal<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addTwoInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addTwoInts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Calculation::Addend, ::Calculation::Sum>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Calculation::Addend* request, ::Calculation::Sum* response) { return this->addTwoInts(context, request, response); }));}
    void SetMessageAllocatorFor_addTwoInts(
        ::grpc::experimental::MessageAllocator< ::Calculation::Addend, ::Calculation::Sum>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Calculation::Addend, ::Calculation::Sum>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addTwoInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoInts(::grpc::ServerContext* /*context*/, const ::Calculation::Addend* /*request*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addTwoInts(
      ::grpc::CallbackServerContext* /*context*/, const ::Calculation::Addend* /*request*/, ::Calculation::Sum* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addTwoInts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Calculation::Addend* /*request*/, ::Calculation::Sum* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addTotal() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::Calculation::Num, ::Calculation::Sum>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::Calculation::Sum* response) { return this->addTotal(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_addTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Calculation::Num>* /*reader*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::Calculation::Num>* addTotal(
      ::grpc::CallbackServerContext* /*context*/, ::Calculation::Sum* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::Calculation::Num>* addTotal(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::Calculation::Sum* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getRamdomTotal() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::Calculation::Num>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request) { return this->getRamdomTotal(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_getRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRamdomTotal(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::Calculation::Num>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::Calculation::Num>* getRamdomTotal(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::Calculation::Num>* getRamdomTotal(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_exchangeRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_exchangeRamdomTotal() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::Calculation::Num, ::Calculation::Num>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->exchangeRamdomTotal(context); }));
    }
    ~ExperimentalWithCallbackMethod_exchangeRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeRamdomTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Calculation::Num, ::Calculation::Num>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::Calculation::Num, ::Calculation::Num>* exchangeRamdomTotal(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::Calculation::Num, ::Calculation::Num>* exchangeRamdomTotal(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_addTwoInts<ExperimentalWithCallbackMethod_addTotal<ExperimentalWithCallbackMethod_getRamdomTotal<ExperimentalWithCallbackMethod_exchangeRamdomTotal<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_addTwoInts<ExperimentalWithCallbackMethod_addTotal<ExperimentalWithCallbackMethod_getRamdomTotal<ExperimentalWithCallbackMethod_exchangeRamdomTotal<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_addTwoInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addTwoInts() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addTwoInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoInts(::grpc::ServerContext* /*context*/, const ::Calculation::Addend* /*request*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addTotal() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_addTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Calculation::Num>* /*reader*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRamdomTotal() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRamdomTotal(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::Calculation::Num>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exchangeRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exchangeRamdomTotal() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_exchangeRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeRamdomTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Calculation::Num, ::Calculation::Num>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_addTwoInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addTwoInts() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_addTwoInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoInts(::grpc::ServerContext* /*context*/, const ::Calculation::Addend* /*request*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTwoInts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addTotal() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_addTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Calculation::Num>* /*reader*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTotal(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRamdomTotal() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRamdomTotal(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::Calculation::Num>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRamdomTotal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exchangeRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exchangeRamdomTotal() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_exchangeRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeRamdomTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Calculation::Num, ::Calculation::Num>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexchangeRamdomTotal(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addTwoInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addTwoInts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addTwoInts(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addTwoInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoInts(::grpc::ServerContext* /*context*/, const ::Calculation::Addend* /*request*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addTwoInts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addTwoInts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addTotal() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->addTotal(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Calculation::Num>* /*reader*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* addTotal(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* addTotal(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getRamdomTotal() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->getRamdomTotal(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_getRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRamdomTotal(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::Calculation::Num>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getRamdomTotal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* getRamdomTotal(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_exchangeRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_exchangeRamdomTotal() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->exchangeRamdomTotal(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_exchangeRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeRamdomTotal(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Calculation::Num, ::Calculation::Num>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* exchangeRamdomTotal(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* exchangeRamdomTotal(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addTwoInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addTwoInts() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Calculation::Addend, ::Calculation::Sum>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Calculation::Addend, ::Calculation::Sum>* streamer) {
                       return this->StreamedaddTwoInts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addTwoInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addTwoInts(::grpc::ServerContext* /*context*/, const ::Calculation::Addend* /*request*/, ::Calculation::Sum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddTwoInts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Calculation::Addend,::Calculation::Sum>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addTwoInts<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getRamdomTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getRamdomTotal() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::Calculation::Num>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::Calculation::Num>* streamer) {
                       return this->StreamedgetRamdomTotal(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getRamdomTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRamdomTotal(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::Calculation::Num>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetRamdomTotal(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::Calculation::Num>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getRamdomTotal<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_addTwoInts<WithSplitStreamingMethod_getRamdomTotal<Service > > StreamedService;
};

class CalculateAsyncService final {
 public:
  static constexpr char const* service_full_name() {
    return "Calculation.CalculateAsyncService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getPlusOne(::grpc::ClientContext* context, const ::Calculation::Num& request, ::Calculation::Num* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Num>> AsyncgetPlusOne(::grpc::ClientContext* context, const ::Calculation::Num& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Num>>(AsyncgetPlusOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Num>> PrepareAsyncgetPlusOne(::grpc::ClientContext* context, const ::Calculation::Num& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Num>>(PrepareAsyncgetPlusOneRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getPlusOne(::grpc::ClientContext* context, const ::Calculation::Num* request, ::Calculation::Num* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getPlusOne(::grpc::ClientContext* context, const ::Calculation::Num* request, ::Calculation::Num* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getPlusOne(::grpc::ClientContext* context, const ::Calculation::Num* request, ::Calculation::Num* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Num>* AsyncgetPlusOneRaw(::grpc::ClientContext* context, const ::Calculation::Num& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Calculation::Num>* PrepareAsyncgetPlusOneRaw(::grpc::ClientContext* context, const ::Calculation::Num& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getPlusOne(::grpc::ClientContext* context, const ::Calculation::Num& request, ::Calculation::Num* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Calculation::Num>> AsyncgetPlusOne(::grpc::ClientContext* context, const ::Calculation::Num& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Calculation::Num>>(AsyncgetPlusOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Calculation::Num>> PrepareAsyncgetPlusOne(::grpc::ClientContext* context, const ::Calculation::Num& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Calculation::Num>>(PrepareAsyncgetPlusOneRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getPlusOne(::grpc::ClientContext* context, const ::Calculation::Num* request, ::Calculation::Num* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getPlusOne(::grpc::ClientContext* context, const ::Calculation::Num* request, ::Calculation::Num* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getPlusOne(::grpc::ClientContext* context, const ::Calculation::Num* request, ::Calculation::Num* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Calculation::Num>* AsyncgetPlusOneRaw(::grpc::ClientContext* context, const ::Calculation::Num& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Calculation::Num>* PrepareAsyncgetPlusOneRaw(::grpc::ClientContext* context, const ::Calculation::Num& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getPlusOne_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getPlusOne(::grpc::ServerContext* context, const ::Calculation::Num* request, ::Calculation::Num* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getPlusOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPlusOne() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getPlusOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlusOne(::grpc::ServerContext* /*context*/, const ::Calculation::Num* /*request*/, ::Calculation::Num* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPlusOne(::grpc::ServerContext* context, ::Calculation::Num* request, ::grpc::ServerAsyncResponseWriter< ::Calculation::Num>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getPlusOne<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPlusOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getPlusOne() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Calculation::Num, ::Calculation::Num>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Calculation::Num* request, ::Calculation::Num* response) { return this->getPlusOne(context, request, response); }));}
    void SetMessageAllocatorFor_getPlusOne(
        ::grpc::experimental::MessageAllocator< ::Calculation::Num, ::Calculation::Num>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Calculation::Num, ::Calculation::Num>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getPlusOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlusOne(::grpc::ServerContext* /*context*/, const ::Calculation::Num* /*request*/, ::Calculation::Num* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPlusOne(
      ::grpc::CallbackServerContext* /*context*/, const ::Calculation::Num* /*request*/, ::Calculation::Num* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPlusOne(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Calculation::Num* /*request*/, ::Calculation::Num* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_getPlusOne<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_getPlusOne<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getPlusOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPlusOne() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getPlusOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlusOne(::grpc::ServerContext* /*context*/, const ::Calculation::Num* /*request*/, ::Calculation::Num* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPlusOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPlusOne() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getPlusOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlusOne(::grpc::ServerContext* /*context*/, const ::Calculation::Num* /*request*/, ::Calculation::Num* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPlusOne(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPlusOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getPlusOne() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPlusOne(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getPlusOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlusOne(::grpc::ServerContext* /*context*/, const ::Calculation::Num* /*request*/, ::Calculation::Num* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPlusOne(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPlusOne(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPlusOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPlusOne() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Calculation::Num, ::Calculation::Num>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Calculation::Num, ::Calculation::Num>* streamer) {
                       return this->StreamedgetPlusOne(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPlusOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPlusOne(::grpc::ServerContext* /*context*/, const ::Calculation::Num* /*request*/, ::Calculation::Num* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPlusOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Calculation::Num,::Calculation::Num>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getPlusOne<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getPlusOne<Service > StreamedService;
};

}  // namespace Calculation


#endif  // GRPC_calc_5fadd_2eproto__INCLUDED
