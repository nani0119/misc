// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calc_add.proto

#include "calc_add.pb.h"
#include "calc_add.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Calculation {

static const char* CalculateService_method_names[] = {
  "/Calculation.CalculateService/addTwoInts",
  "/Calculation.CalculateService/addTotal",
  "/Calculation.CalculateService/getRamdomTotal",
  "/Calculation.CalculateService/exchangeRamdomTotal",
};

std::unique_ptr< CalculateService::Stub> CalculateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CalculateService::Stub> stub(new CalculateService::Stub(channel));
  return stub;
}

CalculateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_addTwoInts_(CalculateService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addTotal_(CalculateService_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_getRamdomTotal_(CalculateService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_exchangeRamdomTotal_(CalculateService_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status CalculateService::Stub::addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::Calculation::Sum* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_addTwoInts_, context, request, response);
}

void CalculateService::Stub::experimental_async::addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_addTwoInts_, context, request, response, std::move(f));
}

void CalculateService::Stub::experimental_async::addTwoInts(::grpc::ClientContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_addTwoInts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Calculation::Sum>* CalculateService::Stub::PrepareAsyncaddTwoIntsRaw(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Calculation::Sum>::Create(channel_.get(), cq, rpcmethod_addTwoInts_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::Calculation::Sum>* CalculateService::Stub::AsyncaddTwoIntsRaw(::grpc::ClientContext* context, const ::Calculation::Addend& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddTwoIntsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::Calculation::Num>* CalculateService::Stub::addTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response) {
  return ::grpc::internal::ClientWriterFactory< ::Calculation::Num>::Create(channel_.get(), rpcmethod_addTotal_, context, response);
}

void CalculateService::Stub::experimental_async::addTotal(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::experimental::ClientWriteReactor< ::Calculation::Num>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::Calculation::Num>::Create(stub_->channel_.get(), stub_->rpcmethod_addTotal_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::Calculation::Num>* CalculateService::Stub::AsyncaddTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Calculation::Num>::Create(channel_.get(), cq, rpcmethod_addTotal_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::Calculation::Num>* CalculateService::Stub::PrepareAsyncaddTotalRaw(::grpc::ClientContext* context, ::Calculation::Sum* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Calculation::Num>::Create(channel_.get(), cq, rpcmethod_addTotal_, context, response, false, nullptr);
}

::grpc::ClientReader< ::Calculation::Num>* CalculateService::Stub::getRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::Calculation::Num>::Create(channel_.get(), rpcmethod_getRamdomTotal_, context, request);
}

void CalculateService::Stub::experimental_async::getRamdomTotal(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::Calculation::Num>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Calculation::Num>::Create(stub_->channel_.get(), stub_->rpcmethod_getRamdomTotal_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Calculation::Num>* CalculateService::Stub::AsyncgetRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Calculation::Num>::Create(channel_.get(), cq, rpcmethod_getRamdomTotal_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Calculation::Num>* CalculateService::Stub::PrepareAsyncgetRamdomTotalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Calculation::Num>::Create(channel_.get(), cq, rpcmethod_getRamdomTotal_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::Calculation::Num, ::Calculation::Num>* CalculateService::Stub::exchangeRamdomTotalRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Calculation::Num, ::Calculation::Num>::Create(channel_.get(), rpcmethod_exchangeRamdomTotal_, context);
}

void CalculateService::Stub::experimental_async::exchangeRamdomTotal(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Calculation::Num,::Calculation::Num>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Calculation::Num,::Calculation::Num>::Create(stub_->channel_.get(), stub_->rpcmethod_exchangeRamdomTotal_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>* CalculateService::Stub::AsyncexchangeRamdomTotalRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Calculation::Num, ::Calculation::Num>::Create(channel_.get(), cq, rpcmethod_exchangeRamdomTotal_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Calculation::Num, ::Calculation::Num>* CalculateService::Stub::PrepareAsyncexchangeRamdomTotalRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Calculation::Num, ::Calculation::Num>::Create(channel_.get(), cq, rpcmethod_exchangeRamdomTotal_, context, false, nullptr);
}

CalculateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CalculateService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CalculateService::Service, ::Calculation::Addend, ::Calculation::Sum>(
          [](CalculateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Calculation::Addend* req,
             ::Calculation::Sum* resp) {
               return service->addTwoInts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CalculateService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< CalculateService::Service, ::Calculation::Num, ::Calculation::Sum>(
          [](CalculateService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::Calculation::Num>* reader,
             ::Calculation::Sum* resp) {
               return service->addTotal(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CalculateService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CalculateService::Service, ::google::protobuf::Empty, ::Calculation::Num>(
          [](CalculateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::Calculation::Num>* writer) {
               return service->getRamdomTotal(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CalculateService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< CalculateService::Service, ::Calculation::Num, ::Calculation::Num>(
          [](CalculateService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::Calculation::Num,
             ::Calculation::Num>* stream) {
               return service->exchangeRamdomTotal(ctx, stream);
             }, this)));
}

CalculateService::Service::~Service() {
}

::grpc::Status CalculateService::Service::addTwoInts(::grpc::ServerContext* context, const ::Calculation::Addend* request, ::Calculation::Sum* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CalculateService::Service::addTotal(::grpc::ServerContext* context, ::grpc::ServerReader< ::Calculation::Num>* reader, ::Calculation::Sum* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CalculateService::Service::getRamdomTotal(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::Calculation::Num>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CalculateService::Service::exchangeRamdomTotal(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Calculation::Num, ::Calculation::Num>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Calculation

